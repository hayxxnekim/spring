package com.myweb.www.config;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

//config 라인임을 알림

@Configuration
@MapperScan(basePackages = {"com.myweb.www.repository"})
@ComponentScan(basePackages = {"com.myweb.www.service"})
@EnableAspectJAutoProxy
@EnableTransactionManagement
public class RootConfig {
	//DB 설정 부분
	//전과 달라진 부분 log4jdbc-log4j2 사용
	//hikariCP 사용
	
	//어노테이션으로 처리, inject와 비슷
	@Autowired
	ApplicationContext applicationContext;
	
	@Bean
	public DataSource dataSource() {
		HikariConfig hikariConfig = new HikariConfig();
		//log4jdbc-log4j2의 드라이브 클래스 url 사용
		hikariConfig.setDriverClassName("net.sf.log4jdbc.sql.jdbcapi.DriverSpy");
		hikariConfig.setJdbcUrl("jdbc:log4jdbc:mysql://localhost:3306/springdb");
		hikariConfig.setUsername("springUser");
		hikariConfig.setPassword("mysql");
		
		//최대 커넥션 개수
		hikariConfig.setMaximumPoolSize(5);
		//최소 유휴 커넥션 개수(반드시 같은 값으로 설정)
		hikariConfig.setMinimumIdle(5);
		//test 쿼리
		hikariConfig.setConnectionTestQuery("SELECT now()");
		//pool name 설정
		hikariConfig.setPoolName("springHikariCP");
		
		//config의 추가 설정
		//cache 사용 여부 설정 true
		hikariConfig.addDataSourceProperty("dataSource.cachePrepStmts", "true");
		//mysql 드라이버가 연결당 cache statements의 수에 관한 설정 보통 default 25 250 ~ 500 사이 권장
		hikariConfig.addDataSourceProperty("dataSource.prepStmtCacheSize", "200");
		//mysql connection당 캐싱할 preparedStatement의 개수 지정 옵션 default 256
		hikariConfig.addDataSourceProperty("dataSource.prepStmtCacheSqlLimit", "true"); //기본값
		//mysql 서버에서 최신 이슈가 있을 경우 지원 받는 설정 true
		hikariConfig.addDataSourceProperty("dataSource.useServerPrepStmts", "true");
		
		HikariDataSource hikariDataSource = new HikariDataSource(hikariConfig);
		return hikariDataSource;
	}
	
	@Bean
	public SqlSessionFactory SqlSessionFactory() throws Exception {
		SqlSessionFactoryBean sqlFactoryBean = new SqlSessionFactoryBean();
		sqlFactoryBean.setDataSource(dataSource());
		sqlFactoryBean.setMapperLocations(
				applicationContext.getResources("classpath:/mappers/*.xml"));
		sqlFactoryBean.setConfigLocation(
				applicationContext.getResource("classpath:/MybatisConfig.xml"));
		return (SqlSessionFactory)sqlFactoryBean.getObject();
		
	}
	//트렌잭션메니저 빈 설정
	@Bean
	public DataSourceTransactionManager transactionManager() {
		//dataSource 기반 DataSourceTransactionManager 생성
		return new DataSourceTransactionManager(dataSource());
	}
}
